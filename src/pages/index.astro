---
let portfolioData: any = ['vacio'];

// Hacer la petición GET para obtener todos los datos del portafolio
try {
  // const response = await fetch('http://localhost:3000/api/portfolio');
  const response = await fetch('http://api-portfolio-rust.vercel.app/api/portfolio');
  if (!response.ok) {
    throw new Error('Error al obtener los datos del portafolio');
  }
  portfolioData = await response.json();
  console.log('Datos del portafolio cargados:', portfolioData);
} catch (error) {
  console.error('Error en la petición GET:', error.message);
}
---

<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Portafolio de Juan Andres Vallejo Acosta</title>
  <link rel="icon" href="https://img.freepik.com/vector-premium/vector-personajes-dibujos-animados-portatiles_1023984-25168.jpg" type="image/png">

  <style>
    body {
      font-family: 'Inter', sans-serif;
      margin: 0;
      padding: 0;
      background-color: #141414;
      color: #f0f0f0;
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
    }

    h1, h2 {
      color: #50B3FF;
      text-align: center;
    }

    .container {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 2rem;
      width: 90%;
      max-width: 1200px;
    }

    .profile {
      display: flex;
      flex-direction: column;
      align-items: center;
      text-align: center;
    }

    .profile img {
      width: 150px;
      height: 150px;
      border-radius: 50%;
      margin-bottom: 1rem;
      border: 3px solid #50B3FF;
    }

    .contact-info, .experience, .skills, .education, .languages, .certifications {
      background-color: #1e1e1e;
      padding: 2rem;
      border-radius: 8px;
      width: 100%;
      box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.5);
    }

    .section-title {
      font-size: 1.5rem;
      color: #8A2BE2;
      margin-bottom: 1rem;
    }

    .experience-item, .education-item, .skill-item, .language-item, .certification-item {
      margin-bottom: 1rem;
    }

    /* Efectos sutiles */
    .container > div {
      opacity: 0;
      transform: translateY(50px);
      animation: fadeIn 1s ease-in-out forwards;
    }

    @keyframes fadeIn {
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    /* Contenedor Three.js */
    #threejs-container {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      z-index: -1;
      background: transparent;
    }
  </style>
</head>
<body>

  <!-- Animación de fondo con Three.js -->
  <div id="threejs-container"></div> 

  <div class="container">
    <h1>Portafolio de Juan Andres Vallejo Acosta</h1>
  
    <div class="profile">
      {portfolioData[0]?.personalData && (
        <>
          <img src={portfolioData[0].personalData.profilePicture} alt="Foto de perfil de Juan Andres" />
          <h2>{portfolioData[0].personalData.fullName}</h2>
          <p>{portfolioData[0].personalData.documentType}: {portfolioData[0].personalData.documentNumber}</p>
          <p><strong>Fecha de nacimiento:</strong> {portfolioData[0].personalData.dateOfBirth}</p>
          <p><strong>Nacionalidad:</strong> {portfolioData[0].personalData.nationality}</p>
          <p><strong>Estado civil:</strong> {portfolioData[0].personalData.maritalStatus}</p>
        </>
      )}
    </div>
  
    <div class="contact-info">
      {portfolioData[0]?.personalData?.contactInfo && (
        <>
          <h2 class="section-title">Información de Contacto</h2>
          <p><strong>Teléfono:</strong> {portfolioData[0].personalData.contactInfo.phoneNumber}</p>
          <p><strong>Email:</strong> {portfolioData[0].personalData.contactInfo.email}</p>
          <p><strong>Dirección:</strong> {portfolioData[0].personalData.contactInfo.address.street}, {portfolioData[0].personalData.contactInfo.address.city}, {portfolioData[0].personalData.contactInfo.address.department}, {portfolioData[0].personalData.contactInfo.address.postalCode}</p>
        </>
      )}
    </div>
  
    <div class="experience">
      <h2 class="section-title">Experiencia Laboral</h2>
      {portfolioData[0]?.workExperience?.map((job) => (
        <div class="experience-item">
          <p><strong>{job.companyName}</strong> - {job.position}</p>
          <p><em>{job.location.city}, {job.location.department}</em></p>
          <p>{job.responsibilities.join(', ')}</p>
        </div>
      ))}
    </div>
  
    <div class="education">
      <h2 class="section-title">Formación Académica</h2>
      {portfolioData[0]?.academicData?.map((edu) => (
        <div class="education-item">
          <p><strong>{edu.institution}</strong></p>
          <p>{edu.degree} ({edu.status})</p>
          <p><em>{edu.startDate} - {edu.endDate}</em></p>
        </div>
      ))}
    </div>
  
    <div class="skills">
      <h2 class="section-title">Habilidades</h2>
      {portfolioData[0]?.skills?.map((skill) => (
        <div class="skill-item">
          <p><strong>{skill.name}:</strong> {skill.proficiencyLevel}</p>
        </div>
      ))}
    </div>
  
    <div class="languages">
      <h2 class="section-title">Idiomas</h2>
      {portfolioData[0]?.languages?.map((lang) => (
        <div class="language-item" >
          <p><strong>{lang.language}:</strong> {lang.proficiencyLevel}</p>
        </div>
      ))}
    </div>
  
    <div class="certifications">
      <h2 class="section-title">Certificaciones</h2>
      {portfolioData[0]?.certifications?.map((cert) => (
        <div class="certification-item">
          <p><strong>{cert.title}</strong> - {cert.institution}</p>
          <p><em>Emitido el {cert.issueDate}</em></p>
        </div>
      ))}
    </div>
  </div>
  

  <script type="module">
    import * as THREE from 'https://cdn.skypack.dev/three@0.140.0';

// Configuración de la escena de Three.js
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
const renderer = new THREE.WebGLRenderer({ alpha: true });
renderer.setSize(window.innerWidth, window.innerHeight);
document.getElementById('threejs-container').appendChild(renderer.domElement);

// Geometría de una esfera para animación
const geometry = new THREE.SphereGeometry(5, 32, 32);
const material = new THREE.MeshBasicMaterial({ color: 0x8A2BE2, wireframe: true });
const sphere = new THREE.Mesh(geometry, material);
scene.add(sphere);

// Configurar la cámara
camera.position.z = 20;

// Agregar partículas al fondo
const particleCount = 2000;
const particlesGeometry = new THREE.BufferGeometry();
const particlesMaterial = new THREE.PointsMaterial({ color: 0xffffff, size: 0.5 });
const positions = new Float32Array(particleCount * 3);

for (let i = 0; i < particleCount; i++) {
    positions[i * 3] = (Math.random() - 0.5) * 500; // x
    positions[i * 3 + 1] = (Math.random() - 0.5) * 500; // y
    positions[i * 3 + 2] = (Math.random() - 0.5) * 500; // z
}

particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
const particles = new THREE.Points(particlesGeometry, particlesMaterial);
scene.add(particles);

// Manejo de mouse
let mouseX = 0, mouseY = 0;

document.addEventListener('mousemove', (event) => {
    mouseX = (event.clientX / window.innerWidth) * 2 - 1;
    mouseY = -(event.clientY / window.innerHeight) * 2 + 1;
});

// Animación de la esfera y partículas
const animate = function () {
    requestAnimationFrame(animate);

    // Rotación de la esfera
    sphere.rotation.x += 0.01;
    sphere.rotation.y += 0.01;

    // Movimiento de la esfera con el mouse
    sphere.position.x = mouseX * 5;
    sphere.position.y = mouseY * 5;

    // Animación de partículas
    particles.rotation.x += 0.0005;
    particles.rotation.y += 0.001;

    renderer.render(scene, camera);
};

animate();

// Manejar el redimensionamiento de la ventana
window.addEventListener('resize', () => {
    const width = window.innerWidth;
    const height = window.innerHeight;
    renderer.setSize(width, height);
    camera.aspect = width / height;
    camera.updateProjectionMatrix();
});

  </script>
</body>
</html>

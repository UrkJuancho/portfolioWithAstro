---
import * as THREE from 'three';

// Obtener datos del portafolio desde la API (simulado aquí con datos ficticios)
let portfolioItems = [];
try {
  portfolioItems = await getPortfolioItems(); // Asegúrate de que esta función esté correctamente implementada en tu servicio
} catch (error) {
  console.error("Error al obtener los elementos del portafolio:", error);
}
---

<style>
  body {
    font-family: 'Inter', sans-serif;
    background: #1a1a2e;
    color: #eaeaea;
    margin: 0;
    padding: 0;
    overflow-x: hidden;
  }

  h1 {
    text-align: center;
    font-size: 3rem;
    color: #ff6f61;
    margin-top: 1.5rem;
  }

  #portfolio-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin: 2rem auto;
    width: 80%;
    max-width: 1200px;
    background: rgba(255, 255, 255, 0.1);
    padding: 2rem;
    border-radius: 10px;
    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
  }

  ul {
    list-style: none;
    padding: 0;
    margin: 2rem 0;
    display: flex;
    flex-wrap: wrap;
    gap: 1.5rem;
    justify-content: center;
  }

  li {
    background: #162447;
    padding: 1rem 1.5rem;
    border-radius: 8px;
    color: #fff;
    text-align: center;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    transition: transform 0.3s ease-in-out;
  }

  li:hover {
    transform: scale(1.05);
    background: #ff6f61;
  }

  #canvas-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
  }
</style>

<div id="canvas-container"></div>

<h1>Portafolio de Juan Andres Vallejo Acosta</h1>
<div id="portfolio-container">
  <ul>
    {portfolioItems.map((item) => (
      <li key={item._id}>{item.name}</li>
    ))}
  </ul>
</div>

<script is:inline>
  import * as THREE from 'three';

  // Crear la escena, cámara y renderizador de Three.js
  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
  const renderer = new THREE.WebGLRenderer({ alpha: true });
  renderer.setSize(window.innerWidth, window.innerHeight);
  document.getElementById('canvas-container').appendChild(renderer.domElement);

  // Crear una geometría animada (ej. torus)
  const geometry = new THREE.TorusGeometry(10, 3, 16, 100);
  const material = new THREE.MeshStandardMaterial({ color: 0xff6f61, metalness: 0.7, roughness: 0.2 });
  const torus = new THREE.Mesh(geometry, material);
  scene.add(torus);

  // Añadir luces
  const pointLight = new THREE.PointLight(0xffffff);
  pointLight.position.set(5, 5, 5);
  scene.add(pointLight);

  const ambientLight = new THREE.AmbientLight(0xffffff);
  scene.add(ambientLight);

  // Configurar la posición de la cámara
  camera.position.z = 30;

  // Animar la escena
  const animate = () => {
    requestAnimationFrame(animate);
    torus.rotation.x += 0.01;
    torus.rotation.y += 0.005;
    renderer.render(scene, camera);
  };

  animate();

  // Manejar el redimensionamiento de la ventana
  window.addEventListener('resize', () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  });
</script>
